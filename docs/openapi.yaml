openapi: 3.0.3
info:
  title: Lease‑Contract Kiosk API
  version: 0.3.0
  description: |
    - 부동산 등기변동 모니터링 · 전자계약 백엔드
    - **stub 모드** ➀ 등기부 API, ➁ 메일, ➂ S3 를 모두 오프라인으로 대체
    - `Authorization: Bearer <JWT>` 헤더 필요 (로그인 제외)
servers:
  - url: https://api.leasecontract.kr/api/index/
security:
  - bearerAuth: []
tags:
  - name: Agents
  - name: Contracts
  - name: Properties
  - name: Registry
  - name: Alerts
  - name: PASS
paths:
  ##############################
  #  Agents
  ##############################
  /agents:
    post:
      tags: [Agents]
      summary: 공인중개사 회원가입
      operationId: registerAgent
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [email, password, brokerNo, idImage]
              properties:
                email:    { type: string, format: email }
                password: { type: string, format: password }
                brokerNo: { type: string }
                name:     { type: string }
                phoneNum: { type: string }
                idImage:  { type: string, format: binary }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Agent' } } } }
        '409': { $ref: '#/components/responses/Conflict' }
  /agents/login:
    post:
      tags: [Agents]
      summary: 공인중개사 로그인
      operationId: loginAgent
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Credential' }
      responses:
        '200':
          description: JWT 반환
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
  /agents/{id}/approve:
    patch:
      tags: [Agents]
      summary: 회원 승인 (관리자)
      operationId: approveAgent
      parameters:
        - $ref: '#/components/parameters/AgentId'
      responses:
        '200': { description: Approved, content: { application/json: { schema: { $ref: '#/components/schemas/Agent' } } } }
        '404': { $ref: '#/components/responses/NotFound' }

  ##############################
  #  Contracts
  ##############################
  /contracts:
    post:
      tags: [Contracts]
      summary: 계약 초안(DRAFT) 생성
      operationId: createContract
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ContractDraft' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Contract' } } } }
  /contracts/verify:
    post:
      tags: [Contracts]
      summary: 계약 전자서명 토큰 검증
      operationId: verifyContractToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token]
              properties:
                token: { type: string, description: 이메일로 전송된 서명 토큰 }
      responses:
        '200': { description: Verified, content: { application/json: { schema: { $ref: '#/components/schemas/Contract' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
  /contracts/sign:
    get:
      tags: [Contracts]
      summary: 서명 페이지 HTML 반환 (임시)
      operationId: getSignPage
      parameters:
        - in: query
          name: token
          required: true
          schema: { type: string }
      responses:
        '200': { description: HTML page, content: { text/html: { schema: { type: string } } } }
  /contracts/{id}:
    get:
      tags: [Contracts]
      summary: 계약 상세 조회
      operationId: getContract
      parameters:
        - $ref: '#/components/parameters/ContractId'
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Contract' } } } }
        '404': { $ref: '#/components/responses/NotFound' }
  /contracts/{id}/pdf:
    post:
      tags: [Contracts]
      summary: 계약서 PDF 생성 + 업로드
      operationId: generateContractPdf
      parameters:
        - $ref: '#/components/parameters/ContractId'
      responses:
        '200':
          description: PDF key/hash
          content:
            application/json:
              schema:
                type: object
                properties:
                  pdf:  { type: string }
                  hash: { type: string }
  /contracts/{id}/invite:
    patch:
      tags: [Contracts]
      summary: 참가자 초대
      operationId: inviteParticipant
      parameters:
        - $ref: '#/components/parameters/ContractId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, role]
              properties:
                email: { type: string, format: email }
                role:  { type: string, enum: [tenant, landlord] }
      responses:
        '200': { description: Updated, content: { application/json: { schema: { $ref: '#/components/schemas/Contract' } } } }
        '404': { $ref: '#/components/responses/NotFound' }

  ##############################
  #  Properties & Registry
  ##############################
  /properties:
    get:
      tags: [Properties]
      summary: 매물 목록
      operationId: listProperties
      responses:
        '200':
          description: Property 배열
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Property' }
    post:
      tags: [Properties]
      summary: 매물 구독(모니터링 시작)
      operationId: subscribeProperty
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PropertySubscribe' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Property' } } } }
        '409': { $ref: '#/components/responses/Conflict' }
  /registry/{propId}:
    get:
      tags: [Registry]
      summary: 매물 최신 스냅샷
      operationId: getLatestSnapshot
      parameters:
        - $ref: '#/components/parameters/PropertyId'
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Snapshot' } } } }
        '404': { $ref: '#/components/responses/NotFound' }
  /registry/{propId}/events:
    get:
      tags: [Registry]
      summary: 변동 이력 조회
      operationId: listRegistryEvents
      parameters:
        - $ref: '#/components/parameters/PropertyId'
      responses:
        '200':
          description: RegistryEvent 배열
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/RegistryEvent' }
  /registry/{propId}/refresh:
    post:
      tags: [Registry]
      summary: 스냅샷 강제 갱신 (등기부 API 호출)
      operationId: refreshRegistry
      parameters:
        - $ref: '#/components/parameters/PropertyId'
      responses:
        '202': { description: accepted }

  ##############################
  #  PASS (본인확인 Stub)
  ##############################
  /pass/mock-verify:
    post:
      tags: [PASS]
      summary: PASS 본인확인 Mock
      operationId: passMockVerify
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [contractId, participantId]
              properties:
                contractId:    { type: string }
                participantId: { type: string }
                phoneNum:      { type: string }
                name:          { type: string }
      responses:
        '200': { description: Updated, content: { application/json: { schema: { $ref: '#/components/schemas/Contract' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }

  ##############################
  #  Alerts
  ##############################
  /alerts:
    get:
      tags: [Alerts]
      summary: Alert 목록(필터 optional)
      operationId: listAlerts
      parameters:
        - in: query
          name: sent
          schema: { type: boolean }
      responses:
        '200':
          description: Alert 배열
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Alert' }

components:
  ##############################
  # Security Schemes
  ##############################
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  ##############################
  # Common Parameters
  ##############################
  parameters:
    AgentId:
      in: path
      name: id
      required: true
      schema: { type: string, format: uuid }
    PropertyId:
      in: path
      name: propId
      required: true
      schema: { type: string }
    ContractId:
      in: path
      name: id
      required: true
      schema: { type: string }
  ##############################
  # Common Responses
  ##############################
  responses:
    Conflict:
      description: 리소스 중복
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    NotFound:
      description: 리소스를 찾을 수 없음
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    BadRequest:
      description: 잘못된 요청
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
  ##############################
  # Schemas
  ##############################
  schemas:
    # Auth
    Credential:
      type: object
      required: [email, password]
      properties:
        email:    { type: string, format: email }
        password: { type: string, format: password }
    Error:
      type: object
      required: [message]
      properties:
        message: { type: string }
    # Agent
    Agent:
      type: object
      required: [_id, email, brokerNo, approved]
      properties:
        _id:      { type: string }
        name:     { type: string }
        phoneNum: { type: string }
        email:    { type: string, format: email }
        brokerNo: { type: string }
        idImage:  { type: string }
        approved: { type: boolean }
        createdAt:{ type: string, format: date-time }
        updatedAt:{ type: string, format: date-time }
    # Participant
    Participant:
      type: object
      required: [_id, email, role]
      properties:
        _id:       { type: string }
        email:     { type: string, format: email }
        name:      { type: string }
        phoneNum:  { type: string }
        role:      { type: string, enum: [tenant, landlord] }
        verified:  { type: boolean }
        ci:        { type: string }
        signedAt:  { type: string, format: date-time, nullable: true }
        tokenUsed: { type: boolean }
    # Contract
    ContractDraft:
      type: object
      required: [property, finance, period, participants]
      properties:
        property: { type: string }
        finance:
          type: object
          required: [deposit, payment, perMonth]
          properties:
            deposit:  { type: integer }
            payment:  { type: integer }
            perMonth: { type: boolean }
        period:
          type: object
          required: [start, end]
          properties:
            start: { type: string, format: date }
            end:   { type: string, format: date }
        participants:
          type: array
          items: { $ref: '#/components/schemas/Participant' }
    Contract:
      allOf:
        - $ref: '#/components/schemas/ContractDraft'
        - type: object
          required: [_id, state]
          properties:
            _id:      { type: string }
            agent:    { type: string }
            state:    { type: string, enum: [draft, pending, signed, cancelled] }
            pdfPath:  { type: string, nullable: true }
            createdAt:{ type: string, format: date-time }
            updatedAt:{ type: string, format: date-time }
    # Property
    PropertySubscribe:
      type: object
      required: [buildingName, addressBasic, uniqueNo, space, landlord, subsEmail]
      properties:
        buildingName: { type: string }
        addressBasic: { type: string }
        addressDetail:{ type: string }
        space:        { type: integer }
        uniqueNo:     { type: string }
        landlord:     { type: string }
        landlordName: { type: string }
        subsEmail:    { type: array, items: { type: string, format: email } }
        subsPhone:    { type: array, items: { type: string } }
    Property:
      allOf:
        - $ref: '#/components/schemas/PropertySubscribe'
        - type: object
          required: [_id, snapshots]
          properties:
            _id: { type: string }
            snapshots:
              type: array
              items: { $ref: '#/components/schemas/Snapshot' }
            createdAt:{ type: string, format: date-time }
            updatedAt:{ type: string, format: date-time }
    Snapshot:
      type: object
      required: [fetchedAt, hash, parsed]
      properties:
        fetchedAt: { type: string, format: date-time }
        hash:      { type: string }
        parsed:    { type: object }
        rawXml:    { type: string }
    # RegistryEvent
    RegistryEvent:
      type: object
      required: [_id, type, detectedAt]
      properties:
        _id:       { type: string }
        property:  { type: string }
        type:      { type: string }
        diff:      { type: object }
        detectedAt:{ type: string, format: date-time }
    # Alert
    Alert:
      type: object
      required: [_id, type, createdAt, sent]
      properties:
        _id:       { type: string }
        property:  { type: string }
        type:      { type: string }
        message:   { type: string }
        diff:      { type: object }
        sent:      { type: boolean }
        createdAt: { type: string, format: date-time }
